---
- set_fact: role_name=api-web

- name: install nodejs
  include: ../../../tasks/install_node.yml

- name: create root folder
  file: path={{ project_dir }}/{{ role_name }} state=directory

# Windows hosts won't handle creating an actual dir, but it's ok to create a symlink
- file: path={{ project_dir }}/{{ role_name }}/node_modules state=directory recurse=yes
- file: src={{ project_dir }}/{{ role_name }}/node_modules dest={{ cocorico_api_dir }}/node_modules state=link

- name: install npm modules
  npm: path={{ cocorico_api_dir }}

- name: install headstone
  npm: name=headstone version=1.1.0 global=yes

- name: generate the documentation
  shell: npm run doc
  args:
    chdir: "{{ cocorico_api_dir }}"

# headstone will read the mongo URI from the .env file
- name: generate .env file
  template: src=.env.j2 dest={{ project_dir }}/{{ role_name }}/.env

- name: link .env file
  file: src={{ project_dir }}/{{ role_name }}/.env dest={{ cocorico_api_dir }}/.env state=link

- name: generate configuration
  template: src=config.json.j2 dest={{ project_dir }}/{{ role_name }}/config.json
  notify:
    - restart cocorico-api-web service

- name: create admin
  when: is_development_environment
  shell: headstone {{ cocorico_api_dir }}/scripts/add-admin.js
    --cwd={{ cocorico_api_dir }}/src
    --userEmail={{ home_web_admin_email }}
    --userPassword={{ home_web_admin_password }}
    --userName={{ home_web_admin_name }}
    --userIsAdmin=true
    --mongoUri=mongodb://{{ home_db_private_host }}/{{ mongodb_database_name }}
  args:
    chdir: "{{ cocorico_api_dir }}"
  register: result
  changed_when: "'created' in result.stdout"
  failed_when: result.stderr

- name: create test app
  when: is_development_environment
  shell: headstone {{ cocorico_api_dir }}/scripts/add-app.js
    --cwd={{ cocorico_api_dir }}/src
    --title={{ test_app.title }}
    --secret={{ test_app.secret }}
    --url={{ test_app.url }}
    --mongoUri=mongodb://{{ home_db_private_host }}/{{ mongodb_database_name }}
  args:
    chdir: "{{ cocorico_api_dir }}"
  register: create_api_test_app
  changed_when: "'created' in result.stdout"
  failed_when: result.stderr

- name: update configuration
  template: src=config.json.j2 dest={{ project_dir }}/{{ role_name }}/config.json
  when: create_api_test_app
  notify:
    - restart cocorico-api-web service

- name: import pages
  shell: headstone {{ cocorico_api_dir }}/scripts/import-pages.js
    --cwd={{ cocorico_api_dir }}/src
    --mongoUri=mongodb://{{ home_db_private_host }}/{{ mongodb_database_name }}
  args:
    chdir: "{{ cocorico_api_dir }}"
  register: result
  failed_when: result.stderr
  changed_when: "'Updated page' in result.stdout"

- name: link app configuration
  file: src={{ project_dir }}/{{ role_name }}/config.json dest={{ cocorico_api_dir }}/config.json state=link

- name: install upstart script
  template: src={{ role_name }}.upstart.conf.j2 dest=/etc/init/{{ project_name }}-{{ role_name }}.conf
  notify:
    - restart cocorico-api-web service

- name: install redis server
  apt: name=redis-server state=present

- name: install site configuration
  template: src={{ role_name }}.apache.conf.j2 dest=/etc/apache2/sites-available/cocorico-front-web-include/{{ project_name }}-{{ role_name }}.conf
  notify:
    - restart apache2 service

- name: start the service
  service: name=cocorico-api-web state=restarted
